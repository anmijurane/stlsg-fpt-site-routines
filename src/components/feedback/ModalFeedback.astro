---
import Modal from "@components/global/Modal.astro";

import emojiFrown from "@assets/icons/emoji-frown.svg";
import emojiNeutral from "@assets/icons/emoji-neutral.svg";
import emojiSmile from "@assets/icons/emoji-smile.svg";
import { Image } from "astro:assets";
import Button from "@components/Button.astro";
---

<Modal id="feedback" btnClose closeBy="none">
  <div class="text-center">
    <h3 class="text-3xl font-bold text-theme-primary" id="modal-title">
      ¡TU OPINIÓN<br />NOS IMPORTA!
    </h3>
    <div class="mt-2">
      <p class="text-md text-gray-500 font-semibold">
        En esta primera etapa nos gustaría saber como ha sido tu experiencia
      </p>
    </div>
  </div>

  <div class="mt-8 flex flex-col items-center justify-center gap-6">
    <Button
      variant="transparent"
      data-feedback="smile"
      class="flex cursor-pointer justify-center items-center text-start w-full"
    >
      <div class="w-2/3 flex justify-end">
        <Image src={emojiSmile} alt="emojiSmile" />
      </div>
      <span class="mt-1 w-1/2 font-semibold text-theme-primary">Buena</span>
    </Button>
    <Button
      variant="transparent"
      data-feedback="neutral"
      class="flex cursor-pointer justify-center items-center text-start w-full"
    >
      <div class="w-2/3 flex justify-end">
        <Image src={emojiNeutral} alt="emojiNeutral" />
      </div>
      <span class="mt-1 w-1/2 font-semibold text-theme-primary">Regular</span>
    </Button>
    <Button
      variant="transparent"
      data-feedback="frown"
      class="flex cursor-pointer justify-center items-center text-start w-full"
    >
      <div class="w-2/3 flex justify-end">
        <Image src={emojiFrown} alt="emojiFrown" />
      </div>
      <span class="mt-1 w-1/2 font-semibold text-theme-primary">Mala</span>
    </Button>
  </div>
</Modal>

<script>
  let modalMostrado = false;
  let intervalValue: NodeJS.Timeout;
  const userState = {
    buttonsClicked: 0,
    screenTime: 0,
  };

  const sendFeedbackUser = (action: string) => {
    console.log(action);
  };

  const eventButtonsFeedback = () => {
    const buttonsFeedback = document.querySelectorAll<HTMLButtonElement>(
      "button[data-feedback]",
    );
    const buttonClose = document.getElementById("button-close_feedback");

    buttonsFeedback.forEach((it) => {
      it.addEventListener("click", (event) => {
        const element = event.currentTarget as HTMLElement;
        const feedback = element.dataset?.feedback || "";
        sendFeedbackUser(feedback);
        document.dispatchEvent(new Event("close-modal-feedback"));
      });
    });
    buttonClose?.addEventListener("click", () => {
      sendFeedbackUser("closed");
      document.dispatchEvent(new Event("close-modal-feedback"));
    });
  };

  const considerOpeningModal = () => {
    const min = 5;
    const max = 8;
    const randomButtonClicked =
      Math.floor(Math.random() * (max - min + 1)) + min;
    const pressOnSite = userState.buttonsClicked >= randomButtonClicked;
    const timeOnScreen = userState.screenTime > 1 * 60 * 1000;

    if ((pressOnSite || timeOnScreen) && !modalMostrado) {
      modalMostrado = true;
      eventButtonsFeedback();
      document.dispatchEvent(new Event("open-modal-feedback"));
      document.body.removeEventListener("click", handleClickEventInteractive);
      clearInterval(intervalValue);
    }
  };

  const handleClickEventInteractive = (event: MouseEvent) => {
    const element = event.currentTarget as HTMLElement;
    if (!element) return;
    userState.buttonsClicked++;
    considerOpeningModal();
  };

  document.body.addEventListener("click", handleClickEventInteractive);

  window.onload = () => {
    intervalValue = setInterval(() => {
      userState.screenTime++;
      considerOpeningModal();
    }, 1000);
  };
</script>
