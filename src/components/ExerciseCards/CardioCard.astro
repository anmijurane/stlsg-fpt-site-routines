---
interface Props extends Partial<Exercise> {
  dayId: number;
}

import { CheckButtonWithState } from "@components/react/CheckButton";
import TimeChip from "@components/TimeChip.astro";
import type { Exercise } from "@interfaces/routines";
const { time, apparatus, dayId, id } = Astro.props;

const cardioMachines = [
  "Eliptica",
  "Caminadora",
  "Escalera infinita",
  "Remadora",
  "Bicicleta estatica",
]
  .filter((it) => it.toLowerCase() !== apparatus?.name.toLowerCase())
  .concat(...[apparatus?.name || ""])
  .reverse();
---

<div class="rounded-[20px] w-full pb-3 bg-theme-text-light">
  <div class="flex h-full justify-between px-4 pt-4 mb-2 items-center w-full">
    <p class="text-theme-primary text-2xl font-semibold w-10/12">
      Cardio con aparato
    </p>
    <CheckButtonWithState client:load id={id || ""} dayId={dayId} />
  </div>
  <p class="w-5/6 px-4">
    Usa la m√°quina <strong>{apparatus?.name.toLowerCase() || ""}</strong> u otro
    <br />
    aparato de cardio.
  </p>
  <div class="relative overflow-x-auto my-4 hide-scroll mask-fade-both">
    <div class="flex gap-4 p-4 py-2">
      {
        cardioMachines.map((machine) => (
          <div class="h-24 w-24 min-w-24 min-h-24 bg-theme-tertiary rounded-xl">
            <div class="flex items-center justify-center text-center w-full h-full">
              {machine}
            </div>
          </div>
        ))
      }
      <div class="shrink-0 w-3"></div>
    </div>
  </div>
  <TimeChip by={time?.by || 30} unit={time?.unit || "mins"} />
</div>

<style>
  .mask-fade-both {
    -webkit-mask-image: linear-gradient(
      to right,
      transparent 0%,
      black 5%,
      black 95%,
      transparent 100%
    );
    mask-image: linear-gradient(
      to right,
      transparent 0%,
      black 5%,
      black 95%,
      transparent 100%
    );
  }
  .hide-scroll::-webkit-scrollbar {
    display: none;
  }
  .hide-scroll {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
</style>
