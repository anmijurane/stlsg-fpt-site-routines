---
import { Image } from "astro:assets";
import closeIcon from "@assets/icons/close.svg";
type CloseBy = "button" | "backdrop" | "all" | "none";
interface Props {
  id: string;
  btnClose?: boolean;
  closeBy?: CloseBy;
}
const { id, btnClose = false, closeBy = "all" } = Astro.props;
---

<div
  id={id}
  class="modal-dialog hidden"
  aria-labelledby={`modal-${id}`}
  role="dialog"
  aria-modal="false"
>
  <div
    class="fixed inset-0 bg-theme-secondary/40 transition-opacity backdrop-blur-xs"
  >
  </div>

  <div class="fixed inset-0 z-10 w-screen overflow-y-auto">
    <div
      data-backdrop
      class="flex min-h-full items-center justify-center p-4 text-center"
    >
      <div
        data-panel
        class="modal-panel relative w-10/12 max-w-md rounded-2xl bg-white shadow-2xl shadow-theme-primary pt-12 pb-8 px-6"
      >
        {
          btnClose && (
            <button
              id={`button-close_${id}`}
              class="absolute -top-4 -right-4 flex h-12 w-12 items-center justify-center rounded-full cursor-pointer scale-120 transition-transform"
            >
              <span class="sr-only">Cerrar</span>
              <Image
                src={closeIcon}
                alt="close button"
                class="shadow-theme-secondary/30"
              />
            </button>
          )
        }
        <slot />
      </div>
    </div>
  </div>
</div>

<script define:vars={{ id, closeBy }}>
  (() => {
    const dialog = document.getElementById(id);
    const backdrop = dialog.querySelector("[data-backdrop]");
    const panel = dialog.querySelector("[data-panel]");
    const buttonClose = document.getElementById(`button-close_${id}`);
    if (!dialog) return;

    const handleOnCloseModal = () => {
      panel.classList.add("closing");
      buttonClose?.classList.remove("scale-120");
      setTimeout(() => {
        dialog.classList.add("hidden");
        panel.classList.remove("open");
        buttonClose?.classList.add("scale-120");
        panel.classList.remove("closing");
        document.body.style.overflow = "";
      }, 250);
    };
    const handleOnOpenModal = () => {
      if (dialog.classList.contains("hidden")) {
        panel.classList.add("open");
        dialog.classList.remove("hidden");
        document.body.style.overflow = "hidden";
      }
    };

    if (dialog && !dialog.hasAttribute("data-init")) {
      dialog.setAttribute("data-init", "true");
      document.addEventListener(`open-modal-${id}`, () => handleOnOpenModal());
      document.addEventListener(`close-modal-${id}`, () =>
        handleOnCloseModal(),
      );
      if (["all", "backdrop"].includes(closeBy)) {
        dialog.addEventListener("click", (e) => {
          if (e.target === backdrop) handleOnCloseModal();
        });
      }
      if (["all", "button"].includes(closeBy)) {
        buttonClose.addEventListener("click", () => {
          handleOnCloseModal();
        });
      }
    }
  })();
</script>

<style>
  .modal-panel.open {
    animation: dialogFadeIn 0.4s ease-out;
  }

  .modal-panel.closing {
    animation: dialogFadeOut 0.3s ease-in forwards;
  }

  @keyframes dialogFadeIn {
    from {
      opacity: 0;
      transform: translateY(-2rem) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  @keyframes dialogFadeOut {
    from {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
    to {
      opacity: 0;
      transform: translateY(-1rem) scale(0.95);
    }
  }
</style>
